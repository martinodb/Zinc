(in-ns 'csneps.snip)

(load "snip_rui")
(load "snip_message")
(load "snip_linear_rui_set")

(def screenprinter (agent nil))

(def asserter (agent nil))

(def debug false)
(def print-intermediate-results false)
(def async-assert false)

(declare initiate-node-task create-rui-structure get-rule-use-info open-valve)

(defn priority-partial
  [priority f & more] 
  (with-meta (apply partial f more) {:priority priority}))

;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;;; Concurrency control ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Tasks have :priority metadata. This allows the queue to order them
;; properly for execution. Higher priority is executed first.
(def task-cmpr (proxy [Comparator] []
                 (compare [a b]
                          (let [p_a (:priority (meta a))
                                p_b (:priority (meta b))]
                            (cond
                              (= p_a p_b) 0
                              (> p_a p_b) -1
                              :else 1)))))

;; Priority Blocking Queue to handle the tasks.
(def queue (PriorityBlockingQueue. 50 task-cmpr))

;(def queue (LinkedBlockingQueue.))

(def cpus-to-use 1) ;(.availableProcessors (Runtime/getRuntime))

;; Fixed Thread Pool of size 2 * processors, using queue as it's queue.
(def executorService (ThreadPoolExecutor.
                       cpus-to-use
                       cpus-to-use
                       (Long/MAX_VALUE) TimeUnit/NANOSECONDS queue))
(.prestartAllCoreThreads executorService)

(defn resetExecutor
  []
  (.clear queue)
  (.shutdown executorService)
  (def executorService (ThreadPoolExecutor.
                         cpus-to-use
                         cpus-to-use
                         (Long/MAX_VALUE) TimeUnit/NANOSECONDS queue))
  (.prestartAllCoreThreads executorService))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Channel Maniupulation ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn submit-to-channel
  [channel message]
  (when debug (send screenprinter (fn [_]  (println "Submitting" message))))
  (when (:fwd-infer? message)
    (open-valve channel))
  (if (build/valve-open? channel)
    ;; Process as usual.
    (do 
      (when debug (send screenprinter (fn [_]  (println "DEBUG: Received " message))))
      (.execute executorService (priority-partial 1 initiate-node-task (:destination channel) message))
      nil)
    ;; Cache in the waiting-msgs
    (dosync (alter (:waiting-msgs channel) conj message))))

(defn submit-assertion-to-channels
  [term & {:keys [fwd-infer] :or {:fwd-infer false}}]
  ;; Send the information about this assertion forward in the graph.
  ;; Positive instances:
  (let [msg (new-message {:origin term, :support-set #{term}, :type 'I-INFER, :fwd-infer? fwd-infer})]
    (doall (map #(submit-to-channel % msg) @(:i-channels term))))
  ;; Conjunctions:
  ;; Conjunctions have no antecedents if they are true, so the Y-INFER messages must be passed on here
  (when (= (csneps/type-of term) :csneps.core/Conjunction)
    (let [msg (new-message {:origin term, :support-set #{term}, :type 'Y-INFER, :fwd-infer? fwd-infer})]
      (doall (map #(submit-to-channel % msg) @(:y-channels term)))))
  ;; Negations:
  ;; When the assertion makes terms negated, the negated terms need to send out
  ;; on their i-channels that they are now negated.
  (let [msg (new-message {:origin term, :support-set #{term}, :type 'I-INFER, :true? false, :fwd-infer? fwd-infer})
        dcs-map (cf/dcsRelationTermsetMap term)
        nor-dcs (when dcs-map (dcs-map (slot/find-slot 'nor)))]
    (when nor-dcs
      (doseq [negterm nor-dcs]
        (doall (map #(submit-to-channel 
                       % 
                       (new-message {:origin negterm, :support-set #{negterm}, :type 'I-INFER, :true? false, :fwd-infer? fwd-infer})) 
                    @(:i-channels negterm)))))))

(defn open-valve 
  [channel]
  ;; Start by opening the channel. Anything new should go right to the executor pool.
  (dosync (ref-set (:valve-open channel) true))
  ;; Add the waiting messages to the executor pool.
  (doall (map 
           #(.execute executorService (priority-partial 1 initiate-node-task (:destination channel) %))
           @(:waiting-msgs channel)))
  ;; Clear the waiting messages list.
  (dosync (alter (:waiting-msgs channel) empty)))

(defn close-valve
  [channel]
  (dosync (ref-set (:valve-open channel) false)))

(build/fix-fn-defs submit-to-channel new-message)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Simple Event Model ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

(def subscribers (ref {}))

(defn invoke-event 
  [event-key object]
  (when (event-key @subscribers)
    (doseq [callback @(event-key @subscribers)] 
      (callback object))))

(defn assert-callback
  [term]
  ;; Generate a new messsage which says "I'm asserted"
  ;; and put it on whatever channels necessary.
  )



;;;;;;;;;;;;;;;;;
;;; Inference ;;;
;;;;;;;;;;;;;;;;;

(defn negated?
  [term]
  (ct/asserted? (build/build (list 'not term) :Proposition {}) (ct/currentContext)))

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Inference Control ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;

(defn backward-infer
  "Spawns tasks recursively to open valves in channels and begin performing
   backward-chaining inference. The network tries to derive term, and uses a
   set to track which nodes it has already visited."
  ([term] (backward-infer term -10 #{}))
  ([term depth visited] 
    (let [msg (new-message {:type 'BACKWARD-INFER, :priority depth})]
      (doseq [ch @(:ant-in-channels term)]
        (when-not (visited term)
          (.execute executorService (priority-partial -10 backward-infer ch msg depth (conj visited term)))))))
  ([channel message depth visited]
    (when (= (:type message) 'BACKWARD-INFER)
      (when (not (build/valve-open? channel))
        (when debug (send screenprinter (fn [_]  (println "DEBUG: Backward Infer " depth " - opening valve on channel" channel))))
        (open-valve channel))
      (backward-infer (:originator channel) (dec (:priority message)) visited))))

(defn cancel-infer
  "Same idea as backward-infer, except it closes valves. Cancelling inference
   has top priority."
  ([term] 
    (when (> cpus-to-use 1)
      (when debug (send screenprinter (fn [_]  (println "!!C!!"))))
      (let [msg (new-message {:type 'CANCEL-INFER})]
        (doseq [ch @(:ant-in-channels term)]
          (.execute executorService (priority-partial Integer/MAX_VALUE cancel-infer ch msg))))))
  ([channel message]
    (when (= (:type message) 'CANCEL-INFER)
      (when (build/valve-open? channel)
        (when debug (send screenprinter (fn [_]  (println "DEBUG: Cancel Infer - closing valve on channel" channel))))
        (close-valve channel)
        (cancel-infer (:originator channel))))))

(defn forward-infer
  "Begins inference in term. Ignores the state of valves in sending I-INFER and Y-INFER messages
   through the graph."
  [term]
  ;; We need to pretend that a Y-INFER message came in to this node.
  (.execute executorService (priority-partial 1 initiate-node-task term 
                                              (new-message {:origin nil, :support-set #{}, :type 'Y-INFER, :fwd-infer? true}))))

(defn unassert
  "Move forward through the graph recursively unasserting terms which depend on this one."
  ([term]
    (build/unassert term)
    (doseq [ch @(:i-channels term)]
      (.execute executorService (priority-partial Integer/MAX_VALUE unassert (:destination ch) (new-message {:origin term :type 'UNASSERT}) false)))
    (doseq [ch @(:y-channels term)]
      (.execute executorService (priority-partial Integer/MAX_VALUE unassert (:destination ch) (new-message {:origin term :type 'UNASSERT}) true))))
  ([node message ych?]
    (when debug (send screenprinter (fn [_]  (println "Unassert: " message "at" node))))
    (cond 
      (and (not ych?)
           (= (type node) csneps.core.Implication))
      (doseq [ch @(:y-channels node)]
        (.execute executorService (priority-partial Integer/MAX_VALUE unassert (:destination ch) (new-message {:origin (:origin message) :type 'UNASSERT}) true)))
      (let [oscont (map #(contains? % (:origin message)) @(:support node))]
        (and ych?
             (not (empty? oscont))
             (every? true? oscont)))
      (unassert node))))

;;;;;;;;;;;;;;;;;;;;;;;
;;; Inference Rules ;;;
;;;;;;;;;;;;;;;;;;;;;;;

(defn negation-elimination
  "Invert the truth of the :true? key in the message, and pass onward."
  [message node]
  (when (nil? @(:ruis node)) (create-rui-structure node))
  (let [new-ruis (get-rule-use-info (:ruis node) (rui-from-message message))
        dermsg (derivative-message message
                                   :origin node
                                   :support-set (conj (:support-set message) node)
                                   :true? false
                                   :type 'Y-INFER)
        ych @(:y-channels node)]
    (when debug (send screenprinter (fn [_]  (println "NEX" new-ruis))))
    nil
    (when (not (empty? new-ruis))
      (zipmap ych (repeat (count ych) dermsg)))
    ))

(defn negation-introduction
  "Pretty much conjunction-introduction, but with :neg instead of :pos"
  [message node]
  (when (nil? @(:ruis node)) (create-rui-structure node))
  (let [new-ruis (get-rule-use-info (:ruis node) (rui-from-message message))
        der-rui (some #(= (:neg %) (count @(:y-channels node))) new-ruis)
        dermsg (derivative-message message
                                   :origin node
                                   :support-set (conj (:support-set message) node)
                                   :true? true
                                   :type 'I-INFER)
        ich @(:i-channels node)]
    (when debug (send screenprinter (fn [_]  (println "N-Int" new-ruis "\n" der-rui))))
    (when der-rui
      (dosync (alter (:support node) conj (:support-set message)))
      [true (zipmap ich (repeat (count ich) dermsg))])))
  

(defn numericalentailment-elimination
  "Since the implication is true, send a Y-INFER message to each
   of the consequents." 
  [message node]
  (when (nil? @(:ruis node)) (create-rui-structure node))
  (let [new-ruis (get-rule-use-info (:ruis node) (rui-from-message message))
        match-ruis (some #(when (>= (:pos %) (:min node))
                            %)
                         new-ruis)]
    (when match-ruis 
;      (cancel-infer node)
      ;(when (< (:pos match-ruis) (csneps/totparam node)) (cancel-infer node))
      (apply conj {} (doall (map #(vector % (RUI->message match-ruis node 'Y-INFER true true))
                                 (filter #(not (ct/asserted? % (ct/currentContext))) @(:y-channels node))))))))

(defn numericalentailment-introduction
  ""
  [message node])

(defn conjunction-elimination
  "Since the and is true, send a Y-INFER message to each of the
   consequents."
  [message node]
  (let [dermsg (derivative-message message 
                                   :origin node
                                   :support-set (conj (:support-set message) node)
                                   :type 'Y-INFER)
        ych @(:y-channels node)]
    (when debug (send screenprinter (fn [_]  (println "ELIMINATING"))))
    (zipmap ych (repeat (count ych) dermsg))))

(defn conjunction-introduction
  "We are in an unasserted 'and' node, and would like to know if we now
   can say it is true based on message."
  [message node]
  (when (nil? @(:ruis node)) (create-rui-structure node))
  (let [new-ruis (get-rule-use-info (:ruis node) (rui-from-message message))
        der-rui-t (some #(= (:pos %) (count @(:y-channels node))) new-ruis)
        der-rui-f (some #(> (:neg %) 0) new-ruis)
        dermsg-t (imessage-from-ymessage message node)
        dermsg-f (derivative-message message 
                                   :origin node
                                   :support-set (conj (:support-set message) node)
                                   :type 'I-INFER
                                   :true? false)
        ich @(:i-channels node)]
    ;(println "HERE!!!" new-ruis "\n" der-rui)
    (cond
      der-rui-t [true (zipmap ich (repeat (count ich) dermsg-t))]
      der-rui-f [false (zipmap ich (repeat (count ich) dermsg-f))]
      :else nil)))

(defn andor-elimination
  "Since the andor is true, we may have enough information to do elimination
   on it. "
  [message node]
  (when (nil? @(:ruis node)) (create-rui-structure node))
  (let [new-ruis (get-rule-use-info (:ruis node) (rui-from-message message))
        totparam (csneps/totparam node)
        pos-match (some #(when (= (:pos %) (:max node))
                           %) 
                        new-ruis)
        neg-match (some #(when (= (- totparam (:neg %)) (:min node)) %) new-ruis)]
    (when debug (send screenprinter (fn [_]  (println "NRUI" new-ruis))))
    (or 
      (when pos-match
        (apply conj {} (doall (map #(when (and (not ((:flaggedns pos-match) (:destination %)))
                                               (not (negated? (:destination %))))
                                      [% (RUI->message pos-match node 'Y-INFER false true)])
                                   @(:y-channels node)))))
      (when neg-match
        (apply conj {} (doall (map #(when (and (nil? ((:flaggedns neg-match) (:destination %)))
                                               (not (ct/asserted? (:destination %) (ct/currentContext))))
                                      [% (RUI->message neg-match node 'Y-INFER true true)])
                                   @(:y-channels node))))))))

;     Inference can terminate
;        as soon as one of the following is determined to hold:
;        (1) The number of args asserted/derived is > max
;            or the number of negated args asserted/derived is > (tot-min)
;        (2) The number of args asserted/derived is >= min
;            and the number of negated args asserted/derived is >= (tot-max)
;     If type is andor, in case (1) the derivation fails,
;                       and in case (2) the derivation succeeds.
;     If type is thresh, in case (1) the derivation succeeds,
;                        and in case (2) the derivation fails.
(defn param2op-introduction
  "Check the RUIs to see if I have enough to be true."
  [message node]
  (when (nil? @(:ruis node)) (create-rui-structure node))
  (let [new-ruis (get-rule-use-info (:ruis node) (rui-from-message message))
        merged-rui (when new-ruis (reduce merge new-ruis)) ;; If they contradict, we have other problems...
        totparam (csneps/totparam node)
        case1 (and merged-rui
                   (> (:pos merged-rui) (:max node))
                   (> (:neg merged-rui) (- totparam (:min node))))
        case2 (and merged-rui
                   (>= (:pos merged-rui) (:min node))
                   (>= (:neg merged-rui) (- totparam (:max node))))
        dermsg-t (imessage-from-ymessage message node)
        dermsg-f (derivative-message message 
                      :origin node
                      :support-set (conj (:support-set message) node)
                      :type 'I-INFER
                      :true? false)
        ich @(:i-channels node)]
    (when debug (send screenprinter (fn [_]  (println case1 case2))))
    (cond
      (isa? (csneps/syntactic-type-of node) :csneps.core/Andor)
      (if case2
        [true (zipmap ich (repeat (count ich) dermsg-t))])
        ;[false (zipmap ich (repeat (count ich) dermsg-f))])
        ;(and (not case1) case2) (zipmap ich (repeat (count ich) dermsg)))
      (isa? (csneps/syntactic-type-of node) :csneps.core/Thresh)
      (if case1
        [true (zipmap ich (repeat (count ich) dermsg-t))]))))
        ;[false (zipmap ich (repeat (count ich) dermsg-f))]))))
      ;(when (and case1 (not case2)) (zipmap ich (repeat (count ich) dermsg))))))
  
(defn thresh-elimination
  "Thesh is true if less than min or more than max."
  [message node]
  (when (nil? @(:ruis node)) (create-rui-structure node))
  (let [new-ruis (get-rule-use-info (:ruis node) (rui-from-message message))
        totparam (csneps/totparam node)
        ;; Case 1: There are >= minimum true. Therefore > maximum must be true. 
        ;; If there are totparam - max - 1 false, then we can make the rest true.
        more-than-min-true-match (some #(when (and (>= (:pos %) (:min node))
                                                   (= (:neg %) (- totparam (:max node) 1)))
                                          %)
                                       new-ruis)
        ;; Case 2: There are enough false cases such that maximum could not be true.
        ;; Therefore the minimum must be true. If enough of them are already, the rest
        ;; are false.
        less-than-max-true-match (some #(when (and (>= (:neg %) (- totparam (:max node)))
                                                   (= (:pos %) (- (:min node) 1)))
                                          %)
                                          new-ruis)]
    (or (when more-than-min-true-match
          (apply conj {} (doall (map #(when (not ((:flaggedns more-than-min-true-match) (:destination %)))
                                        [% (RUI->message more-than-min-true-match node 'Y-INFER true true)])
                                     @(:y-channels node)))))
        (when less-than-max-true-match
          (apply conj {} (doall (map #(when (nil? ((:flaggedns less-than-max-true-match) (:destination %)))
                                        [% (RUI->message less-than-max-true-match node 'Y-INFER false true)])
                                     @(:y-channels node))))))))

 ; (if (= (:type message) 'FORWARD-INFER)
 ;   (derive-forward-infer message node)
 ;   (imessage-from-ymessage message node))) ;; should be y-message from y-message

(defn elimination-infer
  "Input is a message and node, output is a set of messages derived."
  [message node]
  (when debug (send screenprinter (fn [_]  (println "Inferring in:" node))))
  (case (csneps/type-of node)
    :csneps.core/Negation (negation-elimination message node)
    :csneps.core/Conjunction (conjunction-elimination message node)
    (:csneps.core/Numericalentailment
     :csneps.core/Implication) (numericalentailment-elimination message node)
    (:csneps.core/Andor 
     :csneps.core/Disjunction 
     :csneps.core/Xor
     :csneps.core/Nand)  (andor-elimination message node)
    (:csneps.core/Thresh
     :csneps.core/Equivalence) (thresh-elimination message node)
    nil ;default
    ))

(defn introduction-infer
  ""
  [message node]
  (when debug (send screenprinter (fn [_]  (println "Inferring in:" node))))
  (case (csneps/type-of node)
    :csneps.core/Negation (negation-introduction message node)
    :csneps.core/Conjunction (conjunction-introduction message node)
    (:csneps.core/Numericalentailment
     :csneps.core/Implication) (numericalentailment-introduction message node)
    (:csneps.core/Andor 
     :csneps.core/Disjunction 
     :csneps.core/Xor
     :csneps.core/Nand
     :csneps.core/Thresh
     :csneps.core/Equivalence)  (param2op-introduction message node)
    nil))

(defn derivative-i-message
  [message node]
  (if (= (:type message) 'FORWARD-INFER)
    (derive-forward-infer message node)
    (imessage-from-ymessage message node)))

(defn initiate-node-task
  [term message]
  (when debug (send screenprinter (fn [_]  (println "Begin node task on message: " message "at" term))))
  ;; ---- Elimination Rules ---- ;;
  ;; If I'm already asserted, and I just received an I-INFER message,
  ;; I should attempt to eliminate myself.
  (when (and (ct/asserted? term (ct/currentContext))
             (= (:type message) 'I-INFER))
    (when-let [result (elimination-infer message term)]
      (when debug (send screenprinter (fn [_]  (println "Result Inferred " result))))
      (doseq [[ch msg] result] 
        (submit-to-channel ch msg))))
  
  ;; If I have just received a Y-INFER message, I must make myself
  ;; either true or false according to the message, report that
  ;; new belief, and attempt elimination.
  (when (or (= (:type message) 'Y-INFER)
            ;(backward-infer term) ;; Sure this goes here?
            )
    (if (:true? message) 
      ;; Step 2a: Since I am supposed to be asserted, if I'm not,
      ;; make the assertion and let my i-channels know I am now
      ;; true.
      (do
        ;(println (ct/asserted?  (csneps/get-term 'wft1) (ct/currentContext)) (:support-set message))
        (dosync (alter (:support term) conj (:support-set message)))
        (when-not (ct/asserted? term (ct/currentContext))
          (if print-intermediate-results
            (send screenprinter (fn [_]  (println "> " (build/assert-term term (ct/currentContext) :der))))
            (if async-assert 
              (send asserter (fn [_] (build/assert-term term (ct/currentContext) :der)))
              (build/assert-term term (ct/currentContext) :der)))
          (let [imsg (derivative-message message
                                   :origin term
                                   :support-set (conj (:support-set message) term)
                                   :true? true
                                   :type 'I-INFER)]
            (doseq [cqch @(:i-channels term)] (submit-to-channel cqch imsg))))
        ;; Step 3: Apply elimination rules and report results
        (when-let [result (elimination-infer message term)]
          (when debug (send screenprinter (fn [_]  (println "Result Inferred " result))))
          (doseq [[ch msg] result] 
            (submit-to-channel ch msg))))
      (do
        (let [neg-term (ct/asserted? (build/build (list 'not term) :Entity {}) (ct/currentContext))]
          (dosync (alter (:support neg-term) conj (:support-set message)))
          (when-not (ct/asserted? neg-term (ct/currentContext))
            (if print-intermediate-results
              (send screenprinter (fn [_]  (println "> " (build/assert-term neg-term (ct/currentContext) :der))))
              (build/assert-term neg-term (ct/currentContext) :der))
            (let [imsg (derivative-message message
                                           :origin term
                                           :support-set (conj (:support-set message) term)
                                           :true? false
                                           :type 'I-INFER)]
              (doseq [cqch @(:i-channels term)] (submit-to-channel cqch imsg)))
            )))))
      
;    
;    (when-not (ct/asserted? term (ct/currentContext))
;      (send screenprinter (fn [_]  (println "TRUE?" (:true? message) term)))
;      ;(let [term (if (:true? message) 
;      ;             (build/assert term (ct/currentContext) :der)
;      ;             (build/assert (list 'not term) (ct/currentContext) :der))] ;; Todo: origin set fix.
;      (if (:true? message) 
;        (send screenprinter (fn [_]  (println "> " (build/assert term (ct/currentContext) :der))))
;        (send screenprinter (fn [_]  (println "> " (build/assert (list 'not term) (ct/currentContext) :der)))))
;        ;; TODO: If we asserted (not term), we're no longer concerned with
;        ;; term. We need to re-define term. Did this for this section.
;        (let [imsg (derivative-i-message message term)]
;          (doseq [cqch @(:i-channels term)] (submit-to-channel cqch imsg))))
;    ;; Step 3: Apply elimination rules
;    (when (ct/asserted? term (ct/currentContext))
;      (when-let [result (elimination-infer message term)]
;        (send screenprinter (fn [_]  (println "Result Inferred " result)))
;        ;; Step 4: Report results of elimination rules
;        (doseq [[ch msg] result] 
;          (submit-to-channel ch msg)))))
  ;; ---- Introduction Rules ---- ;;
  (when (and 
          (not (ct/asserted? term (ct/currentContext)))
          (= (:type message) 'I-INFER))
    (when-let [[true? result] (introduction-infer message term)]
      (send screenprinter (fn [_]  (println "Result Inferred " result "," true?)))
      (when result 
        (if true?
          (if print-intermediate-results
            (send screenprinter (fn [_]  (println "> " (build/assert term (ct/currentContext) :der))))
            (build/assert term (ct/currentContext) :der))
          (if print-intermediate-results
            (send screenprinter (fn [_] (println "> " (build/assert (list 'not term) (ct/currentContext) :der))))
            (build/assert (list 'not term) (ct/currentContext) :der)))
        (doseq [[ch msg] result] 
          (submit-to-channel ch msg))))))
          
  
;;; RUI Handling ;;;

(defn create-rui-structure
  "If no RUI structure exists for a rule node, create one. For now,
   we always create an empty set. In the future, we'll create P-Trees
   and S-Indexes as necessary."
  [rulenode]
  (dosync (ref-set (:ruis rulenode) #{})))

(defn get-rule-use-info
  "Makes a call to the appropriate structure to get the rule use info 
   derived based on new-rui. For now, only calls the linear version."
  [struct-ref new-rui]
  (get-rule-use-info-linear struct-ref new-rui))

(defn derived-ruis
  [rui-set-ref new-rui pos neg]
  (let [ruis (get-rule-use-info rui-set-ref new-rui)]
    (filter #(and (>= (:pos %) pos) (>= (:neg %) neg)) ruis)))




  
