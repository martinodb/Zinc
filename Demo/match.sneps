;;; Demo of match, using unification, type checking, and subsumption.
;;; Daniel R. Schlegel
;;; Created 12/9/2013

(in-ns 'zinc.core.snuser)

(clearkb true)

(defineType Animal (Thing))
(defineType Mammal (Animal))
(defineType Dog (Mammal))
(defineType Cat (Mammal))
(defineType Fish (Animal))
(defineType Pike (Fish))
(defineType Bass (Fish))

(defineSlot child :type Animal)
(defineSlot parent :type Animal)
(defineSlot mother :type Animal)
(defineSlot father :type Animal)

(defineSlot dog :type Dog)

(defineSlot object :type Thing
	    :docstring "Non-agentive objects of actions.")
(defineSlot property :type Thing)

(defineCaseframe 'Proposition '('Property object property)
  :docstring "[object] has property [property]")

(defineCaseframe 'Proposition '('Parent parent child))
(defineCaseframe 'Proposition '('Mother mother child))
(defineCaseframe 'Proposition '('Father father child))

(defineCaseframe 'Proposition '('Dog dog))

;; Easy case.
; TODO: Fix bug in unifying this set with the arb!
;(assert '(Dog #{Fido Lassie}))
(assert '(Dog Fido))
(assert '(Dog Lassie))

(assert '(Parent Fido (every x (Father x Fido) (Dog x)))) ;; wft3

(assert '(Parent Fido Lassie)) ;; wft4

(list-terms :types true)

;; An i-channel should be created from wft3 -> wft4
;; and another from wft4 -> wft3.
(snip/ig-status)

;; Subsumption case.
(clearkb)

(assert '(Property
           (every x (Isa x Elephant) (Isa x Animal))
           Large))
          
(assert '(Property
           (every x (Isa x Elephant) (Property x Albino) (Isa x Animal))
           Large)) 

(snip/ig-status)
